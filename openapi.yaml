openapi: 3.0.3
info:
  title: Bauxite ERP API
  version: "1.0.0"
  description: >
    Minimal spec for auth, mines and products. All `/api/*` endpoints require a
    Bearer JWT, except `/api/auth/*`.
servers:
  - url: http://localhost:5000
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Envelope:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        errors:
          type: array
          items: { type: string }
        data: { nullable: true }
        metadata: { type: object, additionalProperties: true }
        timestamp: { type: string, format: date-time }
    Pagination:
      type: object
      properties:
        items:
          type: array
          items: { type: object } # model-specific dicts
        total: { type: integer }
        page: { type: integer }
        per_page: { type: integer }
        pages: { type: integer }
    Mine:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        code: { type: string }
        country: { type: string }
        description: { type: string, nullable: true }
    Product:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        code: { type: string }
        mine_id: { type: integer }
        description: { type: string, nullable: true }
security:
  - bearerAuth: []
paths:
  /api/auth/login:
    post:
      summary: Login (DEV)
      description: Returns a JWT for demo credentials configured in ENV.
      security: []  # public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string }
                password: { type: string }
            examples:
              demo:
                value: { username: "admin", password: "admin" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Envelope" }
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Envelope" }

  /api/mines:
    get:
      summary: List mines
      parameters:
        - in: query; name: page; schema: { type: integer, default: 1 }
        - in: query; name: per_page; schema: { type: integer, default: 20 }
        - in: query; name: name; schema: { type: string }
        - in: query; name: code; schema: { type: string }
        - in: query; name: country; schema: { type: string }
        - in: query; name: q; schema: { type: string }
        - in: query; name: sort_by; schema: { type: string }
        - in: query; name: sort_dir; schema: { type: string, enum: [asc, desc] }
        - in: query; name: include_deleted; schema: { type: boolean }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Envelope" }
    post:
      summary: Create mine
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, code, country]
              properties:
                name: { type: string }
                code: { type: string }
                country: { type: string }
                description: { type: string }
                products:
                  type: array
                  items:
                    type: object
                    required: [name]
                    properties:
                      name: { type: string }
                      code: { type: string }
                      description: { type: string }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Envelope" }

  /api/mines/{mine_id}:
    get:
      summary: Get mine
      parameters:
        - in: path; name: mine_id; required: true; schema: { type: integer }
      responses:
        "200": { description: OK, content: { application/json: { schema: { $ref: "#/components/schemas/Envelope" } } } }
        "404": { description: Not found }
    put:
    patch:
      summary: Update mine
      parameters:
        - in: path; name: mine_id; required: true; schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Mine" }
      responses:
        "200": { description: OK }
    delete:
      summary: Delete (soft)
      parameters:
        - in: path; name: mine_id; required: true; schema: { type: integer }
      responses:
        "200": { description: OK }
  /api/mines/{mine_id}/restore:
    post:
      summary: Restore soft-deleted mine
      parameters:
        - in: path; name: mine_id; required: true; schema: { type: integer }
      responses:
        "200": { description: OK }

  /api/products:
    get:
      summary: List products
      parameters:
        - in: query; name: page; schema: { type: integer, default: 1 }
        - in: query; name: per_page; schema: { type: integer, default: 20 }
        - in: query; name: mine_id; schema: { type: integer }
        - in: query; name: name; schema: { type: string }
        - in: query; name: code; schema: { type: string }
        - in: query; name: q; schema: { type: string }
        - in: query; name: sort_by; schema: { type: string }
        - in: query; name: sort_dir; schema: { type: string, enum: [asc, desc] }
        - in: query; name: include_deleted; schema: { type: boolean }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Envelope" }
    post:
      summary: Create product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, mine_id]
              properties:
                name: { type: string }
                code: { type: string }
                mine_id: { type: integer }
                description: { type: string }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Envelope" }

  /api/products/{product_id}:
    get:
      summary: Get product
      parameters:
        - in: path; name: product_id; required: true; schema: { type: integer }
      responses:
        "200": { description: OK }
        "404": { description: Not found }
    put:
    patch:
      summary: Update product
      parameters:
        - in: path; name: product_id; required: true; schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Product" }
      responses:
        "200": { description: OK }
    delete:
      summary: Delete (soft)
      parameters:
        - in: path; name: product_id; required: true; schema: { type: integer }
      responses:
        "200": { description: OK }
  /api/products/{product_id}/restore:
    post:
      summary: Restore soft-deleted product
      parameters:
        - in: path; name: product_id; required: true; schema: { type: integer }
      responses:
        "200": { description: OK }
